{"ast":null,"code":"var _jsxFileName = \"/Users/yuheikaneshita/Desktop/UNCHAIN/ETH-NFT-game/nft-game-starter-project/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport SelectCharacter from \"./Components/SelectCharacter\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"./constants\";\nimport myEpicGame from \"./utils/MyEpicGame.json\";\nimport { ethers } from \"ethers\"; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'Yuhei_42';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(null); // characterNFT と setCharacterNFT を初期化します。\n\n  const [characterNFT, setCharacterNFT] = useState(null); // ユーザーがRinkeby Network に接続されているか確認します。\n  // '4' は Rinkeby のネットワークコードです。\n\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== \"4\") {\n        alert(\"Rinkeby Test Network に接続してください!\");\n      } else {\n        console.log(\"Rinkeby に接続されています.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ユーザーがMetaMaskを持っているか確認します。\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum); // accountsにWEBサイトを訪れたユーザーのウォレットアカウントを格納します。\n        // （複数持っている場合も加味、よって account's' と変数を定義している）\n\n        const accounts = await ethereum.request({\n          method: \"eth_accounts\"\n        }); // もしアカウントが一つでも存在したら、以下を実行。\n\n        if (accounts.length !== 0) {\n          // accountという変数にユーザーの1つ目（=Javascriptでいう0番目）のアドレスを格納\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account); // currentAccountにユーザーのアカウントアドレスを格納\n\n          setCurrentAccount(account); // ユーザーが Rinkeby に接続されているか確認します。\n\n          checkNetwork();\n        } else {\n          console.log(\"No authorized account found\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // レンダリングメソッド\n\n\n  const renderContent = () => {\n    // シナリオ1.\n    // ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\n    if (!currentAccount) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connect-wallet-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://i.imgur.com/TXBQ4cC.png\",\n          alt: \"LUFFY\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button connect-wallet-button\",\n          onClick: connectWalletAction,\n          children: \"Connect Wallet to Get Started\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this); // シナリオ2.\n      // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、を表示します。\n    } else if (currentAccount && !characterNFT) {\n      return /*#__PURE__*/_jsxDEV(SelectCharacter, {\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 14\n      }, this);\n    }\n  }; // connectWallet メソッドを実装します。\n\n\n  const connectWalletAction = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      } // ユーザーがウォレットを持っているか確認します。\n\n\n      checkIfWalletIsConnected(); // ウォレットアドレスに対してアクセスをリクエストしています。\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      }); // ウォレットアドレスを currentAccount に紐付けます。\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); // ユーザーが Rinkeby に接続されているか確認します。\n\n      checkNetwork();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ページがロードされたときに useEffect()内の関数が呼び出されます。\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []); // ページがロードされたときに useEffect()内の関数が呼び出されます。\n\n  useEffect(() => {\n    // スマートコントラクトを呼び出す関数です。\n    const fetchNFTMetadata = async () => {\n      console.log(\"Checking for Character NFT on address:\", currentAccount);\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      const txn = await gameContract.checkIfUserHasNFT();\n\n      if (txn.name) {\n        console.log(\"User has character NFT\");\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log(\"No character NFT found\");\n      }\n    }; // 接続されたウォレットがある場合のみ、下記を実行します。\n\n\n    if (currentAccount) {\n      console.log(\"CurrentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"\\u26A1\\uFE0F METAVERSE GAME \\u26A1\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"\\u30D7\\u30EC\\u30A4\\u30E4\\u30FC\\u3068\\u5354\\u529B\\u3057\\u3066\\u30DC\\u30B9\\u3092\\u5012\\u305D\\u3046\\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), renderContent()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built with @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"aqKBxdUsX8kS7n/0F2mn899P2+s=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","SelectCharacter","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","ethers","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","characterNFT","setCharacterNFT","checkNetwork","window","ethereum","networkVersion","alert","console","log","error","checkIfWalletIsConnected","accounts","request","method","length","account","renderContent","connectWalletAction","fetchNFTMetadata","provider","providers","Web3Provider","signer","getSigner","gameContract","Contract","abi","txn","checkIfUserHasNFT","name","twitterLogo"],"sources":["/Users/yuheikaneshita/Desktop/UNCHAIN/ETH-NFT-game/nft-game-starter-project/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport SelectCharacter from \"./Components/SelectCharacter\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"./constants\";\nimport myEpicGame from \"./utils/MyEpicGame.json\";\nimport { ethers } from \"ethers\";\n\n// Constants\nconst TWITTER_HANDLE = 'Yuhei_42';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(null);\n  // characterNFT と setCharacterNFT を初期化します。\n  const [characterNFT, setCharacterNFT] = useState(null);\n\n  // ユーザーがRinkeby Network に接続されているか確認します。\n  // '4' は Rinkeby のネットワークコードです。\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== \"4\") {\n        alert(\"Rinkeby Test Network に接続してください!\");\n      } else {\n        console.log(\"Rinkeby に接続されています.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // ユーザーがMetaMaskを持っているか確認します。\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n        // accountsにWEBサイトを訪れたユーザーのウォレットアカウントを格納します。\n        // （複数持っている場合も加味、よって account's' と変数を定義している）\n        const accounts = await ethereum.request({ method: \"eth_accounts\" });\n        // もしアカウントが一つでも存在したら、以下を実行。\n        if (accounts.length !== 0) {\n          // accountという変数にユーザーの1つ目（=Javascriptでいう0番目）のアドレスを格納\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n          // currentAccountにユーザーのアカウントアドレスを格納\n          setCurrentAccount(account);\n\n          // ユーザーが Rinkeby に接続されているか確認します。\n          checkNetwork()\n        } else {\n          console.log(\"No authorized account found\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  // レンダリングメソッド\n  const renderContent = () => {\n    // シナリオ1.\n    // ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img src=\"https://i.imgur.com/TXBQ4cC.png\" alt=\"LUFFY\" />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet to Get Started\n          </button>\n        </div>\n      );\n      // シナリオ2.\n      // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、を表示します。\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    }\n  };\n\n  // connectWallet メソッドを実装します。\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      // ユーザーがウォレットを持っているか確認します。\n      checkIfWalletIsConnected();\n\n      // ウォレットアドレスに対してアクセスをリクエストしています。\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      // ウォレットアドレスを currentAccount に紐付けます。\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      // ユーザーが Rinkeby に接続されているか確認します。\n      checkNetwork();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // ページがロードされたときに useEffect()内の関数が呼び出されます。\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  // ページがロードされたときに useEffect()内の関数が呼び出されます。\n  useEffect(() => {\n    // スマートコントラクトを呼び出す関数です。\n    const fetchNFTMetadata = async () => {\n      console.log(\"Checking for Character NFT on address:\", currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log(\"User has character NFT\");\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log(\"No character NFT found\");\n      }\n    };\n\n    // 接続されたウォレットがある場合のみ、下記を実行します。\n    if (currentAccount) {\n      console.log(\"CurrentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n        <p className=\"header gradient-text\">⚡️ METAVERSE GAME ⚡️</p>\n          <p className=\"sub-text\">プレイヤーと協力してボスを倒そう✨</p>\n          {/* renderContent メソッドを呼び出します。*/}\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
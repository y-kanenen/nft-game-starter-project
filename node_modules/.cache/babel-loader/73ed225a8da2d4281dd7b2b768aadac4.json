{"ast":null,"code":"var _jsxFileName = \"/Users/yuheikaneshita/Desktop/UNCHAIN/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js\",\n    _s = $RefreshSig$();\n\n// index.js\nimport React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport LoadingIndicator from \"../../Components/LoadingIndicator\"; // SelectCharacter コンポーネントを定義しています。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectCharacter = _ref => {\n  _s();\n\n  let {\n    setCharacterNFT\n  } = _ref;\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null); // Minting の状態保存する状態変数を初期化します。\n\n  const [mintingCharacter, setMintingCharacter] = useState(false); // NFT キャラクターを Mint します。\n\n  const mintCharacterNFTAction = characterId => async () => {\n    try {\n      if (gameContract) {\n        // Mint が開始されたら、ローディングマークを表示する。\n        setMintingCharacter(true);\n        console.log(\"Minting character in progress...\");\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(\"mintTxn:\", mintTxn); // Mint が終了したら、ローディングマークを消す。\n\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn(\"MintCharacterAction Error:\", error); // エラーが発生した場合も、ローディングマークを消す。\n\n      setMintingCharacter(false);\n    }\n  }; // ページがロードされた瞬間に下記を実行します。\n\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer); // gameContract の状態を更新します。\n\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n  useEffect(() => {\n    // NFT キャラクターのデータをスマートコントラクトから取得します。\n    const getCharacters = async () => {\n      try {\n        console.log(\"Getting contract characters to mint\"); // ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\n\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log(\"charactersTxn:\", charactersTxn); // すべてのNFTキャラクターのデータを変換します。\n\n        const characters = charactersTxn.map(characterData => transformCharacterData(characterData)); // ミント可能なすべてのNFTキャラクターの状態を設定します。\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error(\"Something went wrong fetching characters:\", error);\n      }\n    }; // イベントを受信したときに起動するコールバックメソッド onCharacterMint を追加します。\n\n\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(`CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`); // NFT キャラクターが Mint されたら、コントラクトからメタデータを受け取り、アリーナ（ボスとのバトルフィールド）に移動するための状態に設定します。\n\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log(\"CharacterNFT: \", characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n        alert(`NFT キャラクーが Mint されました -- リンクはこちらです: https://rinkeby.rarible.com/token/${gameContract.address}:${tokenId.toNumber()}?tab=details`);\n      }\n    }; // gameContractの準備ができたら、NFT キャラクターを読み込みます。\n\n\n    if (gameContract) {\n      getCharacters(); // リスナーの設定：NFT キャラクターが Mint された通知を受け取ります。\n\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n    }\n\n    return () => {\n      // コンポーネントがマウントされたら、リスナーを停止する。\n      if (gameContract) {\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n      }\n    };\n  }, [gameContract]); // NFT キャラクターをフロントエンドにレンダリングするメソッドです。\n\n  const renderCharacters = () => characters.map((character, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"character-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"name-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: character.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `https://cloudflare-ipfs.com/ipfs/${character.imageURI}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"character-mint-button\",\n      onClick: mintCharacterNFTAction(index),\n      children: `Mint ${character.name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }, this)]\n  }, character.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 13\n  }, this));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select-character-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u23EC \\u4E00\\u7DD2\\u306B\\u6226\\u3046 NFT \\u30AD\\u30E3\\u30E9\\u30AF\\u30BF\\u30FC\\u3092\\u9078\\u629E \\u23EC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }, this), characters.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-grid\",\n      children: renderCharacters()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), mintingCharacter && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"indicator\",\n        children: [/*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Minting In Progress...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SelectCharacter, \"YAIluGJumFDmJAPdOeDT94pTudM=\");\n\n_c = SelectCharacter;\nexport default SelectCharacter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCharacter\");","map":{"version":3,"names":["React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","LoadingIndicator","SelectCharacter","setCharacterNFT","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","mintCharacterNFTAction","characterId","console","log","mintTxn","mintCharacterNFT","wait","error","warn","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","getCharacters","charactersTxn","getAllDefaultCharacters","map","characterData","onCharacterMint","sender","tokenId","characterIndex","toNumber","characterNFT","checkIfUserHasNFT","alert","address","on","off","renderCharacters","character","index","name","imageURI","length"],"sources":["/Users/yuheikaneshita/Desktop/UNCHAIN/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js"],"sourcesContent":["// index.js\nimport React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\n\n// SelectCharacter コンポーネントを定義しています。\nconst SelectCharacter = ({ setCharacterNFT }) => {\n    const [characters, setCharacters] = useState([]);\n    const [gameContract, setGameContract] = useState(null);\n    // Minting の状態保存する状態変数を初期化します。\n    const [mintingCharacter, setMintingCharacter] = useState(false);\n\n    // NFT キャラクターを Mint します。\n    const mintCharacterNFTAction = (characterId) => async () => {\n        try {\n            if (gameContract) {\n                // Mint が開始されたら、ローディングマークを表示する。\n                setMintingCharacter(true);\n\n                console.log(\"Minting character in progress...\");\n                const mintTxn = await gameContract.mintCharacterNFT(characterId);\n                await mintTxn.wait();\n                console.log(\"mintTxn:\", mintTxn);\n                // Mint が終了したら、ローディングマークを消す。\n                setMintingCharacter(false);\n            }\n        } catch (error) {\n            console.warn(\"MintCharacterAction Error:\", error);\n            // エラーが発生した場合も、ローディングマークを消す。\n            setMintingCharacter(false);\n        }\n    };\n  \n    // ページがロードされた瞬間に下記を実行します。\n    useEffect(() => {\n        const { ethereum } = window;\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const gameContract = new ethers.Contract(\n                CONTRACT_ADDRESS,\n                myEpicGame.abi,\n                signer\n            );\n    \n            // gameContract の状態を更新します。\n            setGameContract(gameContract);\n        } else {\n            console.log(\"Ethereum object not found\");\n        }\n    }, []);\n\n    useEffect(() => {\n        // NFT キャラクターのデータをスマートコントラクトから取得します。\n        const getCharacters = async () => {\n          try {\n            console.log(\"Getting contract characters to mint\");\n            // ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\n            const charactersTxn = await gameContract.getAllDefaultCharacters();\n      \n            console.log(\"charactersTxn:\", charactersTxn);\n      \n            // すべてのNFTキャラクターのデータを変換します。\n            const characters = charactersTxn.map((characterData) =>\n                transformCharacterData(characterData)\n            );\n      \n            // ミント可能なすべてのNFTキャラクターの状態を設定します。\n            setCharacters(characters);\n            } catch (error) {\n                console.error(\"Something went wrong fetching characters:\", error);\n            }\n        };\n\n        // イベントを受信したときに起動するコールバックメソッド onCharacterMint を追加します。\n        const onCharacterMint = async (sender, tokenId, characterIndex) => {\n            console.log(\n            `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n            );\n            // NFT キャラクターが Mint されたら、コントラクトからメタデータを受け取り、アリーナ（ボスとのバトルフィールド）に移動するための状態に設定します。\n            if (gameContract) {\n                const characterNFT = await gameContract.checkIfUserHasNFT();\n                console.log(\"CharacterNFT: \", characterNFT);\n                setCharacterNFT(transformCharacterData(characterNFT));\n                alert(\n                    `NFT キャラクーが Mint されました -- リンクはこちらです: https://rinkeby.rarible.com/token/${\n                        gameContract.address\n                    }:${tokenId.toNumber()}?tab=details`\n                );\n            }\n        };\n\n        // gameContractの準備ができたら、NFT キャラクターを読み込みます。\n        if (gameContract) {\n            getCharacters();\n            // リスナーの設定：NFT キャラクターが Mint された通知を受け取ります。\n            gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n        }\n\n        return () => {\n            // コンポーネントがマウントされたら、リスナーを停止する。\n            if (gameContract) {\n                gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n            }\n        };\n\n    }, [gameContract]);\n\n    // NFT キャラクターをフロントエンドにレンダリングするメソッドです。\n    const renderCharacters = () =>\n        characters.map((character, index) => (\n            <div className=\"character-item\" key={character.name}>\n                <div className=\"name-container\">\n                    <p>{character.name}</p>\n                </div>\n                <img src={`https://cloudflare-ipfs.com/ipfs/${character.imageURI}`} />\n                <button\n                    type=\"button\"\n                    className=\"character-mint-button\"\n                    onClick={mintCharacterNFTAction(index)}\n                >{`Mint ${character.name}`}</button>\n            </div>\n    ));\n  \n    return (\n        <div className=\"select-character-container\">\n          <h2>⏬ 一緒に戦う NFT キャラクターを選択 ⏬</h2>\n          {/* キャラクターNFTがフロントエンド上で読み込めている際に、下記を表示します*/}\n          {characters.length > 0 && (\n            <div className=\"character-grid\">{renderCharacters()}</div>\n          )}\n          {/* mintingCharacter = trueの場合のみ、ローディングマークを表示します。*/}\n            {mintingCharacter && (\n            <div className=\"loading\">\n                <div className=\"indicator\">\n                    <LoadingIndicator />\n                    <p>Minting In Progress...</p>\n                </div>\n            </div>\n            )}\n        </div>\n    );\n};\n  \nexport default SelectCharacter;"],"mappings":"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"},"metadata":{},"sourceType":"module"}